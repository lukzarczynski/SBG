import org.junit.Test;

import main.PieceResolver;
import main.PieceResolverException;
import main.Point;
import main.model.Piece;

/**
 * Created by lzarczynski on 30.12.2016.
 */
public class SimpleCompositResolverTest {

    @Test
    public void testPiece() throws PieceResolverException {
//        String pieceRegex = "Q " +
//                "(0,3,p) " +
//                "+ (0,-2,p)^* " +
//                "+ (0,-2,w)^* " +
//                "+ (3,-1,e) " +
//                "+ (-3,-1,e) " +
//                "+ (3,1,e) " +
//                "+ (-3,1,e) " +
//                "+ (3,-1,w) " +
//                "+ (-3,-1,w) " +
//                "+ (3,1,w) " +
//                "+ (-3,1,w) " +
//                "+ (0,1,e) " +
//                "+ (2,1,e) " +
//                "+ (-2,1,e) " +
//                "+ (2,1,p) " +
//                "+ (-2,1,p) " +
//                "+ (0,2,e)(1,1,p) " +
//                "+ (0,2,e)(-1,1,p) " +
//                "+ (1,2,p)(1,3,e)(1,2,p) " +
//                "+ (2,-1,p)(3,-1,e)(2,-1,p) " +
//                "+ (-1,-2,p)(-1,-3,e)(-1,-2,p) " +
//                "+ (-2,1,p)(-3,1,e)(-2,1,p) " +
//                "+ (-1,2,p)(-1,3,e)(-1,2,p) " +
//                "+ (2,1,p)(3,1,e)(2,1,p) " +
//                "+ (1,-2,p)(1,-3,e)(1,-2,p) " +
//                "+ (-2,-1,p)(-3,-1,e)(-2,-1,p) " +
//                "+ (1,2,p)(1,3,e)(1,2,w) " +
//                "+ (2,-1,p)(3,-1,e)(2,-1,w) " +
//                "+ (-1,-2,p)(-1,-3,e)(-1,-2,w) " +
//                "+ (-2,1,p)(-3,1,e)(-2,1,w) " +
//                "+ (-1,2,p)(-1,3,e)(-1,2,w) " +
//                "+ (2,1,p)(3,1,e)(2,1,w) " +
//                "+ (1,-2,p)(1,-3,e)(1,-2,w) " +
//                "+ (-2,-1,p)(-3,-1,e)(-2,-1,w) " +
//                "&";

//        String pieceRegex = "D " +
//                "(1,1,e)^*(1,1,e)(1,0,e) + " +
//                "(1,1,e)^*(1,1,e)(1,0,p) + " +
//                "(1,1,e)^*(1,1,e)(0,1,e) + " +
//                "(1,1,e)^*(1,1,e)(0,1,p) +" +
//                "(1,-1,e)^*(1,-1,e)(1,0,e) + " +
//                "(1,-1,e)^*(1,-1,e)(1,0,p) + " +
//                "(1,-1,e)^*(1,-1,e)(0,-1,e) + " +
//                "(1,-1,e)^*(1,-1,e)(0,-1,p) + " +
//                "(-1,1,e)^*(-1,1,e)(-1,0,e) + " +
//                "(-1,1,e)^*(-1,1,e)(-1,0,p) + " +
//                "(-1,1,e)^*(-1,1,e)(0,1,e) + " +
//                "(-1,1,e)^*(-1,1,e)(0,1,p) +" +
//                "(-1,-1,e)^*(-1,-1,e)(-1,0,e) + " +
//                "(-1,-1,e)^*(-1,-1,e)(-1,0,p) + " +
//                "(-1,-1,e)^*(-1,-1,e)(0,-1,e) + " +
//                "(-1,-1,e)^*(-1,-1,e)(0,-1,p) " +
//                "&";

        String pieceRegex = "O " +
                "(0,1,e)(0,1,e)^* + " +
                "(0,-1,e)(0,-1,e)^* + " +
                "(1,0,e)(1,0,e)^* + " +
                "(-1,0,e)(-1,0,e)^* + " +
                "(1,0,e)^*(1,0,w)(1,0,e)^*(1,0,p) + " +
                "(1,0,e)^*(1,0,p)(1,0,e)^*(1,0,p) + " +
                "(-1,0,e)^*(-1,0,w)(-1,0,e)^*(-1,0,p) + " +
                "(-1,0,e)^*(-1,0,p)(-1,0,e)^*(-1,0,p) + " +
                "(0,1,e)^*(0,1,w)(0,1,e)^*(0,1,p)   + " +
                "(0,1,e)^*(0,1,p)(0,1,e)^*(0,1,p) + " +
                "(0,-1,e)^*(0,-1,w)(0,-1,e)^*(0,-1,p) + " +
                "(0,-1,e)^*(0,-1,p)(0,-1,e)^*(0,-1,p) " +
                "&";

        Piece piece = Piece.parse(pieceRegex, 7, 7);


//        Pair<String, Integer> resolve = PieceResolver.resolve(piece, Pair.of(8, 8));
//
//        System.out.println(resolve);

        System.out.println(PieceResolver.resolve(piece, Point.of(7, 7)));
    }

}
