import main.PieceResolver;
import main.PieceResolverException;
import main.model.Piece;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Test;

/**
 * Created by lzarczynski on 30.12.2016.
 */
public class SimpleCompositResolverTest {

    @Test
    public void testPiece() throws PieceResolverException {
//        String pieceRegex = "Q " +
//                "(0,3,p) " +
//                "+ (0,-2,p)^* " +
//                "+ (0,-2,w)^* " +
//                "+ (3,-1,e) " +
//                "+ (-3,-1,e) " +
//                "+ (3,1,e) " +
//                "+ (-3,1,e) " +
//                "+ (3,-1,w) " +
//                "+ (-3,-1,w) " +
//                "+ (3,1,w) " +
//                "+ (-3,1,w) " +
//                "+ (0,1,e) " +
//                "+ (2,1,e) " +
//                "+ (-2,1,e) " +
//                "+ (2,1,p) " +
//                "+ (-2,1,p) " +
//                "+ (0,2,e)(1,1,p) " +
//                "+ (0,2,e)(-1,1,p) " +
//                "+ (1,2,p)(1,3,e)(1,2,p) " +
//                "+ (2,-1,p)(3,-1,e)(2,-1,p) " +
//                "+ (-1,-2,p)(-1,-3,e)(-1,-2,p) " +
//                "+ (-2,1,p)(-3,1,e)(-2,1,p) " +
//                "+ (-1,2,p)(-1,3,e)(-1,2,p) " +
//                "+ (2,1,p)(3,1,e)(2,1,p) " +
//                "+ (1,-2,p)(1,-3,e)(1,-2,p) " +
//                "+ (-2,-1,p)(-3,-1,e)(-2,-1,p) " +
//                "+ (1,2,p)(1,3,e)(1,2,w) " +
//                "+ (2,-1,p)(3,-1,e)(2,-1,w) " +
//                "+ (-1,-2,p)(-1,-3,e)(-1,-2,w) " +
//                "+ (-2,1,p)(-3,1,e)(-2,1,w) " +
//                "+ (-1,2,p)(-1,3,e)(-1,2,w) " +
//                "+ (2,1,p)(3,1,e)(2,1,w) " +
//                "+ (1,-2,p)(1,-3,e)(1,-2,w) " +
//                "+ (-2,-1,p)(-3,-1,e)(-2,-1,w) " +
//                "&";

        String pieceRegex = "B " +
                "(2,3,p) " +
                "+ (-2,3,p) " +
                "+ (0,-1,e) " +
                "+ (0,-1,p) " +
                "+ (0,-2,w)(1,1,p)(2,2,e)(2,1,e) " +
                "+ (0,-2,w)(-1,1,p)(-2,2,e)(-2,1,e) " +
                "+ (0,-2,w)(1,1,p)(2,2,e)(2,1,p) " +
                "+ (0,-2,w)(-1,1,p)(-2,2,e)(-2,1,p) " +
                "+ (0,-2,w)(1,1,w)(2,2,e)(2,1,e) " +
                "+ (0,-2,w)(-1,1,w)(-2,2,e)(-2,1,e) " +
                "+ (0,-2,w)(1,1,w)(2,2,e)(2,1,p) " +
                "+ (0,-2,w)(-1,1,w)(-2,2,e)(-2,1,p) " +
                "+ (2,0,p)(1,2,p)^*(1,2,e) " +
                "+ (0,-2,p)(2,-1,p)^*(2,-1,e) " +
                "+ (-2,0,p)(-1,-2,p)^*(-1,-2,e) " +
                "+ (0,2,p)(-2,1,p)^*(-2,1,e) " +
                "+ (-2,0,p)(-1,2,p)^*(-1,2,e) " +
                "+ (0,2,p)(2,1,p)^*(2,1,e) " +
                "+ (2,0,p)(1,-2,p)^*(1,-2,e) " +
                "+ (0,-2,p)(-2,-1,p)^*(-2,-1,e) " +
                "+ (2,0,p)(1,2,p)^*(1,2,w) " +
                "+ (0,-2,p)(2,-1,p)^*(2,-1,w) " +
                "+ (-2,0,p)(-1,-2,p)^*(-1,-2,w) " +
                "+ (0,2,p)(-2,1,p)^*(-2,1,w) " +
                "+ (-2,0,p)(-1,2,p)^*(-1,2,w) " +
                "+ (0,2,p)(2,1,p)^*(2,1,w) " +
                "+ (2,0,p)(1,-2,p)^*(1,-2,w) " +
                "+ (0,-2,p)(-2,-1,p)^*(-2,-1,w) " +
                "+ (2,0,p)(1,2,w)^*(1,2,e) " +
                "+ (0,-2,p)(2,-1,w)^*(2,-1,e) " +
                "+ (-2,0,p)(-1,-2,w)^*(-1,-2,e) " +
                "+ (0,2,p)(-2,1,w)^*(-2,1,e) " +
                "+ (-2,0,p)(-1,2,w)^*(-1,2,e) " +
                "+ (0,2,p)(2,1,w)^*(2,1,e) " +
                "+ (2,0,p)(1,-2,w)^*(1,-2,e) " +
                "+ (0,-2,p)(-2,-1,w)^*(-2,-1,e) " +
                "+ (2,0,p)(1,2,w)^*(1,2,w) " +
                "+ (0,-2,p)(2,-1,w)^*(2,-1,w) " +
                "+ (-2,0,p)(-1,-2,w)^*(-1,-2,w) " +
                "+ (0,2,p)(-2,1,w)^*(-2,1,w) " +
                "+ (-2,0,p)(-1,2,w)^*(-1,2,w) " +
                "+ (0,2,p)(2,1,w)^*(2,1,w) " +
                "+ (2,0,p)(1,-2,w)^*(1,-2,w) " +
                "+ (0,-2,p)(-2,-1,w)^*(-2,-1,w) &";


        Piece piece = Piece.parse(pieceRegex, 8, 8);


        Pair<String, Integer> resolve = PieceResolver.resolve(piece, Pair.of(8, 8));

        System.out.println(resolve);
    }

}
