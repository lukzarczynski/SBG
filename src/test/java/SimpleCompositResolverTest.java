import main.model.Piece;
import main.PieceResolver;
import main.PieceResolverException;
import org.apache.commons.lang3.tuple.Pair;
import org.junit.Test;

/**
 * Created by lzarczynski on 30.12.2016.
 */
public class SimpleCompositResolverTest {

    @Test
    public void testPiece() throws PieceResolverException {
//        String pieceRegex = "K " +
//                "(1,-1,p) " +
//                "+ (-1,-1,p) " +
//                "+ (1,0,p)(1,0,p)(1,0,p) " +
//                "+ (1,0,p)(1,0,p)(1,0,p)(1,0,p)(1,0,p)(1,0,p)(1,0,p) " +
//                "+ (1,0,e)(1,0,e)(1,0,e)(1,0,e)(1,0,e) " +
//                "+ (-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e) " +
//                "+ (1,0,p)(1,0,p)(1,0,p)(1,0,p)(1,0,p) " +
//                "+ (-1,0,e)(-1,0,e)(-1,0,e) " +
//                "+ (1,0,e)(1,0,e)(1,0,e)(1,0,e) " +
//                "+ (-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e) " +
//                "+ (-1,0,p)(-1,0,p)(-1,0,p) " +
//                "+ (1,0,e) " +
//                "+ (1,0,e)(1,0,e) " +
//                "+ (-1,0,e) " +
//                "+ (-1,0,e)(-1,0,e) " +
//                "+ (1,0,e)(1,0,e)(1,0,e)(1,0,e)(1,0,e)(1,0,e)(1,0,e) " +
//                "+ (1,0,p) " +
//                "+ (-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p) " +
//                "+ (-1,0,p) " +
//                "+ (-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p) " +
//                "+ (1,0,e)(1,0,e)(1,0,e)(1,0,e)(1,0,e)(1,0,e) " +
//                "+ (-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p) " +
//                "+ (-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p)(-1,0,p) " +
//                "+ (1,0,e)(1,0,e)(1,0,e) " +
//                "+ (-1,0,p)(-1,0,p) " +
//                "+ (-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e) " +
//                "+ (1,0,p)(1,0,p) " +
//                "+ (1,0,p)(1,0,p)(1,0,p)(1,0,p) " +
//                "+ (1,0,p)(1,0,p)(1,0,p)(1,0,p)(1,0,p)(1,0,p) " +
//                "+ (-1,-1,e) " +
//                "+ (1,-1,e) " +
//                "+ (-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e)(-1,0,e) &";


//        String pieceRegex = "P " +
//                "(-1,-3,p) " +
//                "+ (1,-3,p) " +
//                "+ (1,3,p) " +
//                "+ (-1,3,p) &";
//        String pieceRegex = "C " +
//                "(0,1,p) " +
//                "+ (1,1,p) " +
//                "+ (1,1,e) " +
//                "+ (-1,1,p) " +
//                "+ (-1,1,e) " +
//                "+ (0,3,e)(0,1,p) " +
//                "+ (0,3,e)(0,1,e)(0,1,p) " +
//                "+ (0,3,e)(0,1,e)(0,1,e)(0,1,p) " +
//                "+ (0,3,e)(0,1,e)(0,1,e)(0,1,e)(0,1,p) " +
//                "+ (0,3,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,p) " +
//                "+ (0,3,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,p) " +
//                "+ (0,3,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,p) " +
//                "+ (0,3,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,p) " +
//                "&";

//        String pieceRegex = "E " +
//                "(0,1,e) " +
//                "+ (1,0,e)^* " +
//                "+ (-1,0,e)^* " +
//                "+ (2,-2,e)" +
//                "+ (-2,-2,e) " +
//                "+ (2,-2,p) " +
//                "+ (-2,-2,p) " +
//                "+ (3,1,e) " +
//                "+ (-3,1,e) " +
//                "+ (1,-2,e)(1,0,e) " +
//                "+ (-1,-2,e)(-1,0,e) " +
//                "+ (1,-2,e)(1,0,p) " +
//                "+ (-1,-2,e)(-1,0,p) " +
//                "+ (1,-2,p)(1,0,e) " +
//                "+ (-1,-2,p)(-1,0,e) " +
//                "+ (1,-2,p)(1,0,p) " +
//                "+ (-1,-2,p)(-1,0,p) " +
//                "&";

        String pieceRegex = "0.6562-Al_4-00-08.sbgC " +
                "(3,-2,p) " +
                "+ (-3,-2,p) " +
                "+ (-1,0,p) " +
                "+ (-1,0,e) " +
                "+ (1,0,p) " +
                "+ (1,0,e) " +
                "+ (0,1,e) " +
                "+ (0,1,p) " +
                "+ (0,-1,p) " +
                "+ (0,-1,e) " +
                "+ (0,2,p)(0,1,e) " +
                "+ (0,2,p)(0,1,e)(0,1,e) " +
                "+ (0,2,p)(0,1,e)(0,1,e)(0,1,e) " +
                "+ (0,2,p)(0,1,e)(0,1,e)(0,1,e)(0,1,e) " +
                "+ (0,2,p)(0,1,e)(0,1,e)(0,1,e)(0,1,e)(0,1,e) " +
                "+ (0,2,p)(0,1,w)(0,1,e) " +
                "+ (0,2,p)(0,1,w)(0,1,w)(0,1,e) " +
                "+ (0,2,p)(0,1,w)(0,1,w)(0,1,w)(0,1,e) " +
                "+ (0,2,p)(0,1,w)(0,1,w)(0,1,w)(0,1,w)(0,1,e) " +
                "&";

        Piece piece = Piece.parse(pieceRegex, 8, 8);


        Pair<String, Integer> resolve = PieceResolver.resolve(piece, Pair.of(8, 8));

        System.out.println(resolve);
    }

}
